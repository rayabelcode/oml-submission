rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Authentication check
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Validate push tokens array
    function isValidPushTokens() {
      let tokens = request.resource.data.expoPushTokens;
      return tokens == null || (
        tokens is list &&
        tokens.size() <= 20 // Limit number of devices
      );
    }

    // Validate scheduling preferences structure
    function isValidSchedulingPreferences() {
      let prefs = request.resource.data.scheduling_preferences;
      return prefs == null || (
        prefs.relationship_types is map &&
        prefs.global_excluded_times is list &&
        prefs.max_reminders_per_day is number &&
        prefs.timezone is string
      );
    }

    // Validate relationship types
    function isValidRelationshipType() {
      let types = ['work', 'personal', 'family', 'friend'];
      return request.resource.data.scheduling_preferences.relationship_types.keys()
        .hasAll(types);
    }
    
    // Contacts rules
    match /contacts/{contactId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.user_id || 
        resource == null // Allow read during deletion process
      );
      allow create: if isAuthenticated() && request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.user_id && 
        (
          !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['user_id', 'created_at']) || 
          request.resource.data.user_id == request.auth.uid ||
          request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['contact_history', 'last_updated', 'scheduling'])
        );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.user_id;
    }

    // Users rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow checking usernames
      allow list: if isAuthenticated() 
        && request.query.limit <= 10 
        && ('username' in request.query.filters);

      // Allow updates with validation
      allow update: if isAuthenticated() && 
        request.auth.uid == userId && 
        (
          // Scheduling preferences update
          (isValidSchedulingPreferences() && isValidRelationshipType()) ||
          // Push token update with validation
          (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['expoPushTokens', 'devicePlatform', 'lastTokenUpdate']) &&
            isValidPushTokens())
        );
    }
    
    // Reminders rules
    match /reminders/{reminderId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.user_id == request.auth.uid && 
        request.resource.data.user_id == request.auth.uid
      );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.user_id;
    }

    // User preferences rules
    match /user_preferences/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
