rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Modified owner check specifically for contacts
    match /contacts/{contactId} {
    allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.user_id || 
        // Allow read during deletion process
        resource == null
    );
    allow create: if isAuthenticated() && request.resource.data.user_id == request.auth.uid;
    allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.user_id && 
        (
            !request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['user_id', 'created_at']) || 
            request.resource.data.user_id == request.auth.uid ||
            request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['contact_history', 'last_updated', 'scheduling'])
        );
    allow delete: if isAuthenticated() && request.auth.uid == resource.data.user_id;
}

    // Updated user rules to include scheduling preferences
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Allow checking usernames
      allow list: if isAuthenticated() 
        && request.query.limit <= 10 
        && ('username' in request.query.filters);
        
      // Validate scheduling preferences structure when updating
      function isValidSchedulingPreferences() {
        let prefs = request.resource.data.scheduling_preferences;
        return prefs == null || (
          prefs.relationship_types is map &&
          prefs.global_excluded_times is list &&
          prefs.max_reminders_per_day is number &&
          prefs.timezone is string
        );
      }

      // Additional validation for relationship type updates
      function isValidRelationshipType() {
        let types = ['work', 'personal', 'family', 'friend'];
        return request.resource.data.scheduling_preferences.relationship_types.keys()
          .hasAll(types);
      }

      // Add validation to write operations
      allow update: if isAuthenticated() && 
        request.auth.uid == userId && 
        isValidSchedulingPreferences() &&
        isValidRelationshipType();
    }
    
    // Updated reminders rules to handle batch operations and follow-ups
		match /reminders/{reminderId} {
    	allow read: if isAuthenticated();
    	allow create: if isAuthenticated() && request.resource.data.user_id == request.auth.uid;
    	allow update: if isAuthenticated() && (
        resource.data.user_id == request.auth.uid && 
        request.resource.data.user_id == request.auth.uid
    );
    allow delete: if isAuthenticated() && request.auth.uid == resource.data.user_id;
}

    match /user_preferences/{userId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

  }
}
